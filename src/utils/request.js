import axios from 'axios'
import { MessageBox, Message } from 'element-ui'
import store from '@/store'
import { getToken } from '@/utils/auth'

// create an axios instance
const service = axios.create({
  baseURL: process.env.VUE_APP_BASE_API, // url = base url + request url
  // withCredentials: true, // send cookies when cross-domain requests
  timeout: 5000, // request timeout
  headers: {
    'Accept': 'application/json',
    //'Content-Type': 'application/json', // json格式数据
  }
})

// request interceptor
service.interceptors.request.use(
  config => {
    // config.withCredentials = true // 需要跨域打开此配置
    if (store.getters.token) {
      // please modify it according to the actual situation
      config.headers['Authorization'] = `Bearer ${getToken()}`
      console.log('vuex_token')
    }

    return config
  },
  error => {
    // do something with request error
    console.log(error) // for debug
    return Promise.reject(error)
  }
)

// response interceptor
service.interceptors.response.use(

  response => {
    return response.data
  },

  /**
    * This is a central point to handle all
    * error messages generated by HTTP
    * requests
    */
  error => {
    switch (error.response.status) {
      case 422:
        let data = error.response.data.errors
        let content = ''

        Object.keys(data).map(function (key) {
          let value = data[key]
          content = value[0]
        })

        Message.error(content)
        break
      case 403:
        Message.error(error.response.data.message || '您没有此操作权限！')
        break
      case 401:
        if (window.location.pathname !== '/login') {
            window.location.href = '/login'
        }
        break
      case 429:
        Message.error(error.response.data.message || '请求过于频繁！')
        break
      case 500:
      case 501:
      case 503:
      default:
        Message.error('服务器错误!')
    }

    return Promise.reject(error.response)
  }
)

export default service
